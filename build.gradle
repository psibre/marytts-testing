buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.apache.commons:commons-compress:1.9'
    }
}

subprojects {
    apply plugin: 'groovy'

    repositories {
        jcenter()
    }
}

apply from: 'reference-marytts.gradle'
apply from: 'bleeding-marytts.gradle'

subprojects.findAll { it.name.length() == 2 }.each { proj ->
    proj.repositories {
        ['http://wikipedia.c3sl.ufpr.br/', 'https://dumps.wikimedia.org/'].each { mirror ->
            ivy {
                url mirror
                layout 'pattern', {
                    artifact '[module]/[revision]/[module]-[revision]-[classifier].[ext]'
                }
            }
        }
    }

    proj.configurations {
        wikipedia
    }

    proj.sourceSets {
        test {
            groovy {
                srcDir "$rootDir/src/test/groovy"
            }
        }
    }

    proj.dependencies {
        testCompile localGroovy()
        testCompile group: 'org.testng', name: 'testng', version: '6.8.13'
        testCompile group: 'xmlunit', name: 'xmlunit', version: '1.6'
    }

    proj.ext {
        wikiDir = file("$proj.buildDir/wikidump")
        textDir = file("$proj.buildDir/text")
    }

    proj.task('getWikipediaDump', type: Copy) {
        from proj.configurations.wikipedia
        into proj.wikiDir
    }

    proj.task('extractPlainText') {
        inputs.files proj.getWikipediaDump
        def textFile = file("${proj.wikiDir}/text")
        outputs.files textFile
        doFirst {
            textFile.delete()
        }
        doLast {
            inputs.files.asFileTree.files.each { dumpFile ->
                exec {
                    commandLine = ['python', "$rootDir/wikiextractor/WikiExtractor.py", '--no-templates', dumpFile]
                    workingDir proj.wikiDir
                }
            }
        }
    }

    proj.task('splitIntoArticles') {
        inputs.files proj.extractPlainText
        outputs.dir proj.textDir
        doFirst {
            proj.textDir.mkdirs()
        }
        doLast {
            inputs.files.asFileTree.files.each { dumpTextFile ->
                def parser = new groovy.util.XmlSlurper()
                def txtFile
                def article = []
                def articleCount = 0
                dumpTextFile.eachLine { line ->
                    if (articleCount >= 100) {
                        return
                    }
                    switch (line.trim()) {
                        case { it.startsWith('<doc') }:
                            def doc = parser.parseText("$line</doc>")
                            def title = "${doc.@title}"
                            txtFile = file("$proj.textDir/${title.replaceAll('/', '_')}.txt")
                            article = []
                            break
                        case '</doc>':
                            txtFile?.text = article.join('\n')
                            logger.info "Wrote $txtFile.name"
                            articleCount++
                            break
                        default:
                            article << line
                            break
                    }
                }
            }
        }
    }

    proj.test {
        useTestNG()
        afterEvaluate {
            systemProperty 'ReferenceXmlDir', project("$proj.name:reference").xmlDir
            systemProperty 'BleedingXmlDir', project("$proj.name:bleeding").xmlDir
        }
    }
}

subprojects.findAll { it.name ==~ /(reference|bleeding)/ }.each { proj ->
    proj.repositories {
        ivy {
            url project(":$proj.name-marytts").projectDir.path + '/lib/repo'
            layout 'maven'
        }
    }

    proj.ext {
        xmlDir = file("$proj.buildDir/xml")
    }

    proj.dependencies {
        compile localGroovy()
        compile project(":$proj.name-marytts:marytts-languages:marytts-lang-$proj.parent.name")
    }

    proj.sourceSets {
        main {
            groovy {
                srcDir "$rootDir/src/main/groovy"
            }
        }
    }

    proj.task('convertTextToPhonemes') {
        dependsOn proj.classes
        inputs.files proj.parent.splitIntoArticles
        outputs.dir proj.xmlDir
        doFirst {
            proj.xmlDir.mkdirs()
        }
        doLast {
            javaexec {
                main 'Text2Phonemes'
                classpath proj.sourceSets.main.runtimeClasspath
                args proj.parent.name, proj.parent.textDir, proj.xmlDir
                workingDir proj.buildDir
            }
        }
    }
}

subprojects.findAll { it.name.length() == 2 }.each { proj ->
    proj.test.dependsOn proj.subprojects.collect { it.convertTextToPhonemes }
}

import org.apache.commons.compress.compressors.CompressorStreamFactory
import javax.xml.parsers.SAXParserFactory

project.task('extractArticles') {
    dependsOn project('en').getWikipediaDump
    doLast {
        def fileIn = new File(project('en').wikiDir, 'enwiki-20150602-pages-articles1.xml.bz2')
        def fin = new FileInputStream(fileIn)
        def bis = new BufferedInputStream(fin)
        def input = new CompressorStreamFactory().createCompressorInputStream(bis)
        def br2 = new BufferedReader(new InputStreamReader(input))
        def factory = SAXParserFactory.newInstance()
        def saxParser = factory.newSAXParser()
        def dump = new XmlSlurper(saxParser).parse(br2)
        dump.page.eachWithIndex { page, p ->
            if (p > 100) {
                return
            }
            def title = "$page.title".replaceAll('/', '_')
            def mwFile = new File(project('en').wikiDir, "${title}.mediawiki")
            logger.lifecycle "Extracting to $mwFile"
            mwFile.text = page.revision.text
        }
    }
}
